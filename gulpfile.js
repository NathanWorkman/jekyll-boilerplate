const gulp = require('gulp');
const path = require('path');
const del = require('del');
const {exec} = require('child_process');

const browserSync = require('browser-sync').create();
const webpack = require('webpack-stream');
const imagemin = require('gulp-imagemin');
const htmlmin = require('gulp-htmlmin');

// const execFile = util.promisify(require('child_process').exec);
const resolve = path.resolve.bind(path, __dirname);

// Run Webpack to build static CSS and JS assets.
function assets() {
  return gulp
    .src(resolve('./assets/index.js'))
    .pipe(webpack(require('./webpack.config.js')))
    .pipe(gulp.dest('_site/assets'));
}

// Optimize Images
function images() {
  return gulp
    .src('assets/images/**')
    .pipe(imagemin())
    .pipe(gulp.dest('_site/images/'));
}

// Build Jekyll
function build() {
  return exec('bundle exec jekyll build');
}

// Minify HTML
function minifyHtml() {
  return gulp
    .src('_site/**/*.html')
    .pipe(
      htmlmin({
        removeComments: true,
        collapseWhitespace: true,
        collapseBooleanAttributes: true,
        removeAttributeQuotes: true,
        removeRedundantAttributes: true,
        removeEmptyAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        removeOptionalTags: true
      })
    )
    .pipe(gulp.dest('_site'));
}

// Clean build assets
function clean() {
  return del([
    '_site/',
    '_data/webpack.json',
    '.jekyll-metadata',
    '.jekyll-cache'
  ]);
}

// Run dev server
// bind to 0.0.0.0:8080 to work with previews
function serve(cb) {
  browserSync.init(
    {
      server: './_site'
      // port: 8080,
      // host: '0.0.0.0'
    },
    cb
  );
}

// Reload dev site
function reload(cb) {
  browserSync.reload();
  cb();
}

// Watch directories for changes and trigger rebuild
// and reload
function watch(cb) {
  return gulp.watch(
    '**/*', // watch everything for changes
    {
      ignored: [
        // Ignore assets generated by the build process
        '_site/**/**/*',
        '_data/webpack.json'
      ]
    },
    gulp.series(assets, build, reload)
  );
}

exports.clean = gulp.series(clean);
exports.develop = gulp.series(assets, build, images, serve, watch);
exports.build = gulp.series(clean, assets, build, images, minifyHtml);
